import React, { useState, useContext, useEffect } from 'react';
import Sidebar from '../components/Sidebar';
import { GlobalContext } from '../context/GlobalContext';
import { motion } from 'framer-motion';
import {
  Wallet,
  TrendingUp,
  TrendingDown,
  Receipt,
  FileText,
  PieChart,
  ArrowUpRight,
  ArrowDownRight,
  Target,
  Sparkles,
  Clock,
  Zap,
  User,
  Smartphone,
  Calendar,
  Shield,
  Award,
  Key,
  AlertCircle,
  RefreshCw,
  Flame,
  Star,
  Trophy,
  Crown,
  Gift,
  Brain,
  Loader2,
} from 'lucide-react';
import {
  ResponsiveContainer,
  AreaChart,
  Area,
  CartesianGrid,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  PieChart as RechartsPieChart,
  Pie,
  Cell,
} from 'recharts';

// Color palettes
const EXPENSE_COLORS = [
  '#00bfff', '#0099cc', '#006699', '#004466', '#002233', '#51a7f9', '#5bc0eb', '#0074d9'
];
const INCOME_COLORS = [
  '#59d98c', '#2ecc71', '#27ae60', '#229954', '#16a085', '#81c784', '#43a047', '#76d7c4'
];
const BUDGET_COLORS = [
  '#f39c12', '#e67e22', '#d35400', '#f1c40f', '#f7ca18'
];

// Animation variants
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: { delayChildren: 0.1, staggerChildren: 0.1 },
  },
};

const itemVariants = {
  hidden: { y: 18, opacity: 0 },
  visible: { y: 0, opacity: 1, transition: { type: "spring", damping: 12, stiffness: 100 } },
};

const Dashboard = () => {
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [dataError, setDataError] = useState(null);
  const [aiInsight, setAiInsight] = useState('');
  const [isLoadingInsight, setIsLoadingInsight] = useState(false);
  
  // Chart data states
  const [trendData, setTrendData] = useState([]);
  const [incomePieData, setIncomePieData] = useState([]);
  const [expensePieData, setExpensePieData] = useState([]);
  const [budgetPieData, setBudgetPieData] = useState([]);
  
  // Latest data states
  const [latestBudgets, setLatestBudgets] = useState([]);
  const [latestBills, setLatestBills] = useState([]);
  const [latestExpenses, setLatestExpenses] = useState([]);
  const [latestIncomes, setLatestIncomes] = useState([]);

  const {
    userData,
    incomes,
    expenses,
    bills,
    budgets,
    getIncomes,
    getExpenses,
    getBills,
    getBudgets,
    getUserData,
    error,
    setError,
  } = useContext(GlobalContext);

  // Get streak badge based on login streak
  const getStreakBadge = (streak) => {
    if (streak >= 30) return { icon: <Crown className="text-purple-600" size={20} />, text: "Legend", color: "bg-purple-100 text-purple-800" };
    if (streak >= 14) return { icon: <Trophy className="text-yellow-600" size={20} />, text: "Champion", color: "bg-yellow-100 text-yellow-800" };
    if (streak >= 7) return { icon: <Award className="text-blue-600" size={20} />, text: "Warrior", color: "bg-blue-100 text-blue-800" };
    if (streak >= 3) return { icon: <Star className="text-green-600" size={20} />, text: "Rising Star", color: "bg-green-100 text-green-800" };
    return { icon: <Flame className="text-orange-600" size={20} />, text: "Beginner", color: "bg-orange-100 text-orange-800" };
  };

  // Calculate totals safely
  const calculateTotals = () => {
    const totalIncome = Array.isArray(incomes) 
      ? incomes.reduce((sum, income) => sum + (income.amount || 0), 0)
      : 0;
    
    const totalExpenses = Array.isArray(expenses) 
      ? expenses.reduce((sum, expense) => sum + (expense.amount || 0), 0)
      : 0;
    
    const totalBills = Array.isArray(bills) 
      ? bills.reduce((sum, bill) => sum + (bill.amount || 0), 0)
      : 0;
    
    const totalBalance = totalIncome - totalExpenses;

    return { totalIncome, totalExpenses, totalBills, totalBalance };
  };

  // Fetch daily AI insight
  const fetchDailyInsight = async () => {
    try {
      setIsLoadingInsight(true);
      const response = await fetch('/api/chat/get-daily-insight', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          // Add auth headers if needed
        },
      });
      
      if (response.ok) {
        const data = await response.json();
        setAiInsight(data.insight || 'No insights available today.');
      } else {
        setAiInsight('Unable to fetch daily insights. Please try again later.');
      }
    } catch (err) {
      console.error('Error fetching daily insight:', err);
      setAiInsight('Error loading insights. Please check your connection.');
    } finally {
      setIsLoadingInsight(false);
    }
  };

  // Fetch all data with proper error handling
  const fetchAllData = async () => {
    try {
      setIsLoading(true);
      setDataError(null);
      
      // Fetch all data in parallel
      const promises = [
        getUserData(),
        getIncomes(),
        getExpenses(),
        getBills(),
        getBudgets()
      ];

      await Promise.allSettled(promises);
      
    } catch (err) {
      console.error('Error fetching dashboard data:', err);
      setDataError('Failed to load dashboard data. Please try refreshing.');
    } finally {
      setIsLoading(false);
    }
  };

  // Initial data fetch
  useEffect(() => {
    fetchAllData();
  }, []);

  // Process data when it changes
  useEffect(() => {
    if (!isLoading) {
      try {
        generateTrendData();
        generatePieData();
        processLatestData();
      } catch (err) {
        console.error('Error processing data:', err);
        setDataError('Error processing dashboard data');
      }
    }
  }, [incomes, expenses, bills, budgets, isLoading]);

  // Generate trend data for the last 6 months
  const generateTrendData = () => {
    const now = new Date();
    const months = [];
    
    for (let i = 5; i >= 0; i--) {
      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
      months.push({
        month: date.toLocaleString('default', { month: 'short' }),
        year: date.getFullYear(),
        income: 0,
        expense: 0,
        bills: 0,
        balance: 0,
      });
    }

    // Process incomes
    if (Array.isArray(incomes)) {
      incomes.forEach(income => {
        try {
          const date = new Date(income.date);
          const monthStr = date.toLocaleString('default', { month: 'short' });
          const year = date.getFullYear();
          const monthIndex = months.findIndex(m => m.month === monthStr && m.year === year);
          if (monthIndex !== -1) {
            months[monthIndex].income += income.amount || 0;
          }
        } catch (err) {
          console.warn('Invalid income date:', income.date);
        }
      });
    }

    // Process expenses
    if (Array.isArray(expenses)) {
      expenses.forEach(expense => {
        try {
          const date = new Date(expense.date);
          const monthStr = date.toLocaleString('default', { month: 'short' });
          const year = date.getFullYear();
          const monthIndex = months.findIndex(m => m.month === monthStr && m.year === year);
          if (monthIndex !== -1) {
            months[monthIndex].expense += expense.amount || 0;
          }
        } catch (err) {
          console.warn('Invalid expense date:', expense.date);
        }
      });
    }

    // Process bills
    if (Array.isArray(bills)) {
      bills.forEach(bill => {
        try {
          const date = new Date(bill.dueDate);
          const monthStr = date.toLocaleString('default', { month: 'short' });
          const year = date.getFullYear();
          const monthIndex = months.findIndex(m => m.month === monthStr && m.year === year);
          if (monthIndex !== -1) {
            months[monthIndex].bills += bill.amount || 0;
          }
        } catch (err) {
          console.warn('Invalid bill date:', bill.dueDate);
        }
      });
    }

    // Calculate balance for each month
    months.forEach(month => {
      month.balance = month.income - month.expense - month.bills;
    });

    setTrendData(months);
  };

  // Generate pie chart data
  const generatePieData = () => {
    // Income pie data
    const incomeCategoryMap = {};
    if (Array.isArray(incomes)) {
      incomes.forEach(income => {
        const category = income.category || 'Other';
        incomeCategoryMap[category] = (incomeCategoryMap[category] || 0) + (income.amount || 0);
      });
    }
    
    setIncomePieData(
      Object.entries(incomeCategoryMap).map(([category, amount], index) => ({
        name: category,
        value: amount,
        color: INCOME_COLORS[index % INCOME_COLORS.length]
      }))
    );

    // Expense pie data
    const expenseCategoryMap = {};
    if (Array.isArray(expenses)) {
      expenses.forEach(expense => {
        const category = expense.category || 'Other';
        expenseCategoryMap[category] = (expenseCategoryMap[category] || 0) + (expense.amount || 0);
      });
    }
    
    setExpensePieData(
      Object.entries(expenseCategoryMap).map(([category, amount], index) => ({
        name: category,
        value: amount,
        color: EXPENSE_COLORS[index % EXPENSE_COLORS.length]
      }))
    );

    // Budget pie data
    if (Array.isArray(budgets)) {
      setBudgetPieData(
        budgets.map((budget, index) => ({
          name: budget.title || budget.category || `Budget ${index + 1}`,
          value: budget.amount || 0,
          color: BUDGET_COLORS[index % BUDGET_COLORS.length]
        }))
      );
    }
  };

  // Process latest data for each category
  const processLatestData = () => {
    // Latest budgets
    if (Array.isArray(budgets)) {
      const sortedBudgets = [...budgets]
        .sort((a, b) => new Date(b.startDate || b.createdAt) - new Date(a.startDate || a.createdAt))
        .slice(0, 5);
      setLatestBudgets(sortedBudgets);
    }

    // Latest bills
    if (Array.isArray(bills)) {
      const sortedBills = [...bills]
        .sort((a, b) => new Date(b.dueDate || b.createdAt) - new Date(a.dueDate || a.createdAt))
        .slice(0, 5);
      setLatestBills(sortedBills);
    }

    // Latest expenses
    if (Array.isArray(expenses)) {
      const sortedExpenses = [...expenses]
        .sort((a, b) => new Date(b.date || b.createdAt) - new Date(a.date || a.createdAt))
        .slice(0, 5);
      setLatestExpenses(sortedExpenses);
    }

    // Latest incomes
    if (Array.isArray(incomes)) {
      const sortedIncomes = [...incomes]
        .sort((a, b) => new Date(b.date || b.createdAt) - new Date(a.date || a.createdAt))
        .slice(0, 5);
      setLatestIncomes(sortedIncomes);
    }
  };

  // Format date helper
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    try {
      return new Date(dateString).toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric', 
        year: 'numeric' 
      });
    } catch {
      return 'Invalid Date';
    }
  };

  // Calculate totals
  const { totalIncome, totalExpenses, totalBills, totalBalance } = calculateTotals();

  // Get streak badge
  const streakBadge = getStreakBadge(userData?.loginStreak || 0);

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-blue-100 to-blue-200 flex items-center justify-center">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
          className="w-16 h-16 border-4 border-blue-400 border-t-transparent rounded-full"
        />
        <span className="ml-4 text-blue-600 font-medium">Loading dashboard...</span>
      </div>
    );
  }

  return (
    <>
      <Sidebar onToggle={setIsSidebarCollapsed} />
      <div 
        className={`flex-1 p-4 sm:p-6 lg:p-8 transition-all duration-300 overflow-y-auto ${
          isSidebarCollapsed ? 'ml-16' : 'ml-64'
        }`}
        style={{ background: 'white' }}
      >
        {/* Error Banner */}
        {(dataError || error) && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-6 p-4 bg-red-50 border border-red-200 rounded-xl flex items-center gap-3"
          >
            <AlertCircle className="text-red-500" size={20} />
            <span className="text-red-700">{dataError || error}</span>
            <button
              onClick={() => {
                setDataError(null);
                setError(null);
                fetchAllData();
              }}
              className="ml-auto flex items-center gap-2 px-3 py-1 bg-red-100 hover:bg-red-200 rounded-lg text-red-700 text-sm transition-colors"
            >
              <RefreshCw size={16} />
              Retry
            </button>
          </motion.div>
        )}

        {/* User Card with Login Streak */}
        <motion.div initial={{ opacity: 0, y: -16 }} animate={{ opacity: 1, y: 0 }} className="mb-8">
          <div className="flex flex-col lg:flex-row gap-6 items-start lg:items-center bg-white rounded-xl shadow-lg border-2 border-blue-200 p-6 lg:p-7">
            <div className="flex gap-4 sm:gap-6 items-center flex-1">
              <img
                src={userData?.image || "/user-avatar.png"}
                alt={userData?.name || "User"}
                className="rounded-full border-2 border-blue-300 w-20 h-20 sm:w-24 sm:h-24 object-cover"
                onError={(e) => {
                  e.target.src = "/user-avatar.png";
                }}
              />
              <div className="flex-1">
                <h1 className="text-2xl lg:text-3xl font-bold text-blue-700">{userData?.name || "User"}</h1>
                <p className="text-gray-700 font-medium">{userData?.email || "No email"}</p>
                <div className="flex flex-wrap gap-2 sm:gap-3 text-sm mt-2">
                  {userData?.age > 0 && (
                    <span className="flex items-center gap-1 text-blue-500">
                      <User size={16} /> Age: {userData.age}
                    </span>
                  )}
                  {userData?.phone && (
                    <span className="flex items-center gap-1 text-blue-500">
                      <Smartphone size={16} /> {userData.phone}
                    </span>
                  )}
                  {userData?.createdAt && (
                    <span className="flex items-center gap-1 text-blue-500">
                      <Calendar size={16} /> Joined: {formatDate(userData.createdAt)}
                    </span>
                  )}
                  <span className="flex items-center gap-1 text-blue-500">
                    <Shield size={16} /> 
                    {userData?.isAccountVerified ? "Verified" : "Not Verified"}
                  </span>
                  {userData?.isPremium && (
                    <span className="flex items-center gap-1 text-yellow-600 font-bold">
                      <Award size={16} /> Premium
                    </span>
                  )}
                  {userData?.isAdmin && (
                    <span className="flex items-center gap-1 text-indigo-600 font-bold">
                      <Key size={16} /> Admin
                    </span>
                  )}
                </div>
              </div>
            </div>
            
            {/* Login Streak Section */}
            <div className="flex flex-col items-center lg:items-end gap-3">
              <motion.div
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                transition={{ delay: 0.3 }}
                className="flex flex-col items-center gap-2"
              >
                <div className="flex items-center gap-2">
                  <motion.div
                    animate={{ 
                      scale: [1, 1.1, 1],
                      rotate: [0, 5, -5, 0]
                    }}
                    transition={{ 
                      duration: 2, 
                      repeat: Infinity,
                      repeatType: "loop"
                    }}
                  >
                    <Flame className="text-orange-500" size={24} />
                  </motion.div>
                  <span className="text-2xl font-bold text-orange-600">
                    {userData?.loginStreak || 0}
                  </span>
                </div>
                <span className="text-sm font-medium text-gray-600">Day Streak</span>
                
                {/* Streak Badge */}
                <div className={`px-3 py-1 rounded-full flex items-center gap-2 ${streakBadge.color}`}>
                  {streakBadge.icon}
                  <span className="text-sm font-bold">{streakBadge.text}</span>
                </div>
                
                {/* Monthly Badge */}
                {userData?.loginStreak >= 30 && (
                  <motion.div
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    transition={{ delay: 0.5, type: "spring" }}
                    className="flex items-center gap-2 bg-gradient-to-r from-purple-100 to-pink-100 px-3 py-1 rounded-full border border-purple-200"
                  >
                    <Gift className="text-purple-600" size={16} />
                    <span className="text-sm font-bold text-purple-700">Monthly Achiever</span>
                  </motion.div>
                )}
              </motion.div>
              
              {userData?.lastLogin && (
                <div className="text-xs text-gray-400 text-right">
                  <div>Last Login: {formatDate(userData.lastLogin)}</div>
                  {/* <div>Account: {userData?.isDeactivated ? "Deactivated" : "Active"}</div> */}
                </div>
              )}
            </div>
          </div>
        </motion.div>

        {/* AI Insights with Get Today Insight Button */}
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-gradient-to-r from-blue-50 to-blue-100 p-6 rounded-xl mb-8 border border-blue-200"
        >
          <div className="flex flex-col sm:flex-row items-start gap-4">
            <motion.div
              animate={{ rotate: [0, 10, -10, 0], scale: [1, 1.12, 1] }}
              transition={{ duration: 3, repeat: Infinity }}
              className="w-12 h-12 bg-gradient-to-r from-blue-400 to-indigo-400 rounded-full flex items-center justify-center flex-shrink-0"
            >
              <Zap className="text-white" size={22} />
            </motion.div>
            <div className="flex-1">
              <div className="flex flex-col sm:flex-row sm:items-center gap-3 mb-2">
                <h3 className="font-bold text-gray-800 flex items-center">
                  <Sparkles className="mr-2 text-blue-500" size={18} />
                  AI Financial Insights
                </h3>
                <button
                  onClick={fetchDailyInsight}
                  disabled={isLoadingInsight}
                  className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-indigo-500 to-purple-500 hover:from-indigo-600 hover:to-purple-600 text-white rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed text-sm font-medium"
                >
                  {isLoadingInsight ? (
                    <Loader2 className="animate-spin" size={16} />
                  ) : (
                    <Brain size={16} />
                  )}
                  Get Today's Insight
                </button>
              </div>
              
              <p className="text-gray-700 leading-relaxed mb-3">
                {aiInsight || (totalBalance > 0
                  ? `Excellent! You have a healthy positive balance of ₹${totalBalance.toLocaleString()}. Consider investing or saving for your future goals.`
                  : totalBalance === 0
                    ? "You're breaking even this month. Try increasing your income or reducing expenses."
                    : `You're overspending by ₹${Math.abs(totalBalance).toLocaleString()}. Consider reviewing your expenses and budget!`)}
              </p>
              
              <div className="flex flex-wrap gap-4 text-sm text-gray-600">
                <span>Risk Level: <span className="font-bold text-blue-700">{userData?.onboardingData?.riskLevel || "Not Set"}</span></span>
                {userData?.onboardingData?.isCurrentlyInvesting && (
                  <span>
                    Investments: <span className="font-bold text-green-600">
                      {userData?.onboardingData?.investmentTypes?.join(', ') || "N/A"}
                    </span>
                  </span>
                )}
                {userData?.onboardingData?.savingsGoal && userData.onboardingData.savingsGoal > 0 && (
                  <span>
                    Savings Goal: <span className="font-bold text-yellow-600">
                      ₹{userData?.onboardingData?.savingsGoal.toLocaleString()}
                    </span>
                  </span>
                )}
              </div>
            </div>
          </div>
        </motion.div>

        {/* Overview Cards */}
        <motion.div
          variants={containerVariants}
          initial="hidden"
          animate="visible"
          className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8"
        >
          {[
            {
              title: "Total Balance",
              amount: totalBalance,
              icon: <Wallet size={24} />,
              bg: "bg-blue-100",
              text: "text-blue-700",
            },
            {
              title: "Total Income",
              amount: totalIncome,
              icon: <TrendingUp size={24} />,
              bg: "bg-green-100",
              text: "text-green-600",
            },
            {
              title: "Total Expenses",
              amount: totalExpenses,
              icon: <TrendingDown size={24} />,
              bg: "bg-red-100",
              text: "text-red-600",
            },
            {
              title: "Total Bills",
              amount: totalBills,
              icon: <Receipt size={24} />,
              bg: "bg-indigo-100",
              text: "text-indigo-600",
            },
          ].map((card, idx) => (
            <motion.div
              key={idx}
              variants={itemVariants}
              className="bg-white p-4 sm:p-6 rounded-xl shadow-lg border-2 border-blue-200 flex flex-col gap-2"
            >
              <div className="flex items-center gap-3">
                <div className={`w-10 h-10 sm:w-12 sm:h-12 rounded-xl ${card.bg} flex items-center justify-center ${card.text}`}>
                  {card.icon}
                </div>
                <span className={`font-bold text-sm sm:text-lg ${card.text}`}>{card.title}</span>
              </div>
              <div className="text-xl sm:text-2xl font-bold text-gray-800">
                ₹{card.amount.toLocaleString()}
              </div>
            </motion.div>
          ))}
        </motion.div>

        {/* Area Chart: Financial Trend */}
          <div className="bg-white p-4 sm:p-6 rounded-xl shadow-lg border-2 border-blue-200">
            <div className="flex items-center gap-3 mb-4">
              <PieChart className="text-blue-500" size={22} />
              <h2 className="text-lg sm:text-xl font-bold text-blue-700">Financial Trends (6 months)</h2>
            </div>
            {trendData.length > 0 ? (
              <div className="w-full">
                <ResponsiveContainer width="100%" height={280}>
                  <AreaChart data={trendData}>
                    <defs>
                      <linearGradient id="incomeGradient" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="5%" stopColor="#59d98c" stopOpacity={0.4} />
                        <stop offset="95%" stopColor="#59d98c" stopOpacity={0} />
                      </linearGradient>
                      <linearGradient id="expenseGradient" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="5%" stopColor="#00bfff" stopOpacity={0.4} />
                        <stop offset="95%" stopColor="#00bfff" stopOpacity={0} />
                      </linearGradient>
                      <linearGradient id="billsGradient" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="5%" stopColor="#6366F1" stopOpacity={0.3} />
                        <stop offset="95%" stopColor="#6366F1" stopOpacity={0} />
                      </linearGradient>
                    </defs>
                    <CartesianGrid stroke="#eaf6fc" />
                    <XAxis dataKey="month" />
                    <YAxis />
                    <Tooltip formatter={(value) => `₹${value.toLocaleString()}`} />
                    <Legend />
                    <Area type="monotone" dataKey="income" stroke="#59d98c" fill="url(#incomeGradient)" />
                    <Area type="monotone" dataKey="expense" stroke="#00bfff" fill="url(#expenseGradient)" />
                    <Area type="monotone" dataKey="bills" stroke="#6366F1" fill="url(#billsGradient)" />
                  </AreaChart>
                </ResponsiveContainer>
              </div>
            ) : (
              <div className="text-gray-400 py-12 text-center">No trend data available</div>
            )}
          </div>

        {/* Charts Section - Made Responsive */}
        <div className="grid grid-cols-1 xl:grid-cols-2 gap-6 sm:gap-8 mb-8">
          

          {/* Budget Overview */}
        {budgetPieData.length > 0 && (
          <div className="bg-white p-4 sm:p-6 rounded-xl shadow-lg border-2 border-blue-200 mb-8">
            <div className="flex items-center gap-3 mb-4">
              <Target className="text-orange-500" size={22} />
              <h2 className="text-lg sm:text-xl font-bold text-orange-600">Budget Overview</h2>
            </div>
            <ResponsiveContainer width="100%" height={300}>
              <RechartsPieChart>
                <Pie
                  data={budgetPieData}
                  cx="50%" cy="50%"
                  innerRadius={60} outerRadius={120}
                  dataKey="value"
                  fill="#8884d8"
                >
                  {budgetPieData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip formatter={(value) => `₹${value.toLocaleString()}`} />
                <Legend />
              </RechartsPieChart>
            </ResponsiveContainer>
          </div>
        )}

          {/* Pie Charts Column */}
          <div className="flex flex-col gap-6 sm:gap-8">
            {/* Income Pie */}
            <div className="bg-white p-4 sm:p-6 rounded-xl shadow-lg border-2 border-blue-200">
              <div className="flex items-center gap-3 mb-2">
                <PieChart className="text-green-500" size={22} />
                <h2 className="text-lg font-bold text-green-600">Income by Category</h2>
              </div>
              {incomePieData.length > 0 ? (
                <ResponsiveContainer width="100%" height={180}>
                  <RechartsPieChart>
                    <Pie
                      data={incomePieData}
                      cx="50%" cy="50%"
                      innerRadius={40} outerRadius={70}
                      dataKey="value"
                      fill="#8884d8"
                    >
                      {incomePieData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip formatter={(value) => `₹${value.toLocaleString()}`} />
                    <Legend />
                  </RechartsPieChart>
                </ResponsiveContainer>
              ) : (
                <div className="text-gray-400 py-8 text-center">No income data</div>
              )}
            </div>

            {/* Expense Pie */}
            <div className="bg-white p-4 sm:p-6 rounded-xl shadow-lg border-2 border-blue-200">
              <div className="flex items-center gap-3 mb-2">
                <PieChart className="text-red-500" size={22} />
                <h2 className="text-lg font-bold text-red-600">Expenses by Category</h2>
              </div>
              {expensePieData.length > 0 ? (
                <ResponsiveContainer width="100%" height={180}>
                  <RechartsPieChart>
                    <Pie
                      data={expensePieData}
                      cx="50%" cy="50%"
                      innerRadius={40} outerRadius={70}
                      dataKey="value"
                      fill="#8884d8"
                    >
                      {expensePieData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip formatter={(value) => `₹${value.toLocaleString()}`} />
                    <Legend />
                  </RechartsPieChart>
                </ResponsiveContainer>
              ) : (
                <div className="text-gray-400 py-8 text-center">No expense data</div>
              )}
            </div>
          </div>
        </div>
        
        {/* Recent Activity Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 sm:gap-8 mb-8">
          {/* Latest Income */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            className="bg-white p-4 sm:p-6 rounded-xl shadow-lg border-2 border-blue-200"
          >
            <div className="flex items-center gap-3 mb-4">
              <ArrowUpRight className="text-green-500" size={22} />
              <h2 className="text-lg font-bold text-green-600">Recent Income</h2>
            </div>
            {latestIncomes.length > 0 ? (
              <div className="space-y-3">
                {latestIncomes.map((income, index) => (
                  <div key={income._id || index} className="flex justify-between items-center p-3 bg-green-50 rounded-lg border border-green-200">
                    <div>
                      <div className="font-medium text-gray-800">{income.title || income.description || 'Income'}</div>
                      <div className="text-sm text-gray-600">{income.category || 'Other'}</div>
                      <div className="text-xs text-gray-500">{formatDate(income.date)}</div>
                    </div>
                    <div className="text-green-600 font-bold">+₹{(income.amount || 0).toLocaleString()}</div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-gray-400 py-8 text-center">No recent income</div>
            )}
          </motion.div>

          {/* Latest Expenses */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            className="bg-white p-4 sm:p-6 rounded-xl shadow-lg border-2 border-blue-200"
          >
            <div className="flex items-center gap-3 mb-4">
              <ArrowDownRight className="text-red-500" size={22} />
              <h2 className="text-lg font-bold text-red-600">Recent Expenses</h2>
            </div>
            {latestExpenses.length > 0 ? (
              <div className="space-y-3">
                {latestExpenses.map((expense, index) => (
                  <div key={expense._id || index} className="flex justify-between items-center p-3 bg-red-50 rounded-lg border border-red-200">
                    <div>
                      <div className="font-medium text-gray-800">{expense.title || expense.description || 'Expense'}</div>
                      <div className="text-sm text-gray-600">{expense.category || 'Other'}</div>
                      <div className="text-xs text-gray-500">{formatDate(expense.date)}</div>
                    </div>
                    <div className="text-red-600 font-bold">-₹{(expense.amount || 0).toLocaleString()}</div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-gray-400 py-8 text-center">No recent expenses</div>
            )}
          </motion.div>
        </div>

        {/* Bills and Budgets Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 sm:gap-8">
          {/* Latest Bills */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-white p-4 sm:p-6 rounded-xl shadow-lg border-2 border-blue-200"
          >
            <div className="flex items-center gap-3 mb-4">
              <Receipt className="text-indigo-500" size={22} />
              <h2 className="text-lg font-bold text-indigo-600">Upcoming Bills</h2>
            </div>
            {latestBills.length > 0 ? (
              <div className="space-y-3">
                {latestBills.map((bill, index) => (
                  <div key={bill._id || index} className="flex justify-between items-center p-3 bg-indigo-50 rounded-lg border border-indigo-200">
                    <div>
                      <div className="font-medium text-gray-800">{bill.title || bill.description || 'Bill'}</div>
                      <div className="text-sm text-gray-600">{bill.category || 'Other'}</div>
                      <div className="text-xs text-gray-500 flex items-center gap-1">
                        <Clock size={12} />
                        Due: {formatDate(bill.dueDate)}
                      </div>
                    </div>
                    <div className="text-indigo-600 font-bold">₹{(bill.amount || 0).toLocaleString()}</div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-gray-400 py-8 text-center">No upcoming bills</div>
            )}
          </motion.div>

          {/* Latest Budgets */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="bg-white p-4 sm:p-6 rounded-xl shadow-lg border-2 border-blue-200"
          >
            <div className="flex items-center gap-3 mb-4">
              <Target className="text-orange-500" size={22} />
              <h2 className="text-lg font-bold text-orange-600">Active Budgets</h2>
            </div>
            {latestBudgets.length > 0 ? (
              <div className="space-y-3">
                {latestBudgets.map((budget, index) => (
                  <div key={budget._id || index} className="p-3 bg-orange-50 rounded-lg border border-orange-200">
                    <div className="flex justify-between items-start mb-2">
                      <div>
                        <div className="font-medium text-gray-800">{budget.title || budget.category || 'Budget'}</div>
                        <div className="text-sm text-gray-600">{budget.description || 'No description'}</div>
                      </div>
                      <div className="text-orange-600 font-bold">₹{(budget.amount || 0).toLocaleString()}</div>
                    </div>
                    <div className="text-xs text-gray-500 flex items-center justify-between">
                      <span>Start: {formatDate(budget.startDate)}</span>
                      <span>End: {formatDate(budget.endDate)}</span>
                    </div>
                    {budget.spent !== undefined && (
                      <div className="mt-2">
                        <div className="flex justify-between text-xs mb-1">
                          <span>Spent: ₹{budget.spent.toLocaleString()}</span>
                          <span>{Math.round((budget.spent / budget.amount) * 100)}%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div 
                            className="bg-orange-500 h-2 rounded-full transition-all duration-300" 
                            style={{ width: `${Math.min((budget.spent / budget.amount) * 100, 100)}%` }}
                          ></div>
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-gray-400 py-8 text-center">No active budgets</div>
            )}
          </motion.div>
        </div>

        {/* Quick Actions Footer */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="mt-8 bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-xl border border-blue-200"
        >
          <h3 className="text-lg font-bold text-blue-700 mb-4 flex items-center gap-2">
            <Zap size={20} />
            Quick Actions
          </h3>
          <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
            <button className="flex flex-col items-center gap-2 p-4 bg-white rounded-lg shadow hover:shadow-md transition-all border border-blue-200 hover:border-blue-300">
              <TrendingUp className="text-green-500" size={24} />
              <span className="text-sm font-medium text-gray-700">Add Income</span>
            </button>
            <button className="flex flex-col items-center gap-2 p-4 bg-white rounded-lg shadow hover:shadow-md transition-all border border-blue-200 hover:border-blue-300">
              <TrendingDown className="text-red-500" size={24} />
              <span className="text-sm font-medium text-gray-700">Add Expense</span>
            </button>
            <button className="flex flex-col items-center gap-2 p-4 bg-white rounded-lg shadow hover:shadow-md transition-all border border-blue-200 hover:border-blue-300">
              <Receipt className="text-indigo-500" size={24} />
              <span className="text-sm font-medium text-gray-700">Add Bill</span>
            </button>
            <button className="flex flex-col items-center gap-2 p-4 bg-white rounded-lg shadow hover:shadow-md transition-all border border-blue-200 hover:border-blue-300">
              <Target className="text-orange-500" size={24} />
              <span className="text-sm font-medium text-gray-700">New Budget</span>
            </button>
          </div>
        </motion.div>
      </div>
    </>
  );
};

export default Dashboard;